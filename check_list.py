from telegram.ext import CallbackContext
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from pymongo import MongoClient
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from telegram import InputFile
import tempfile
from matplotlib.ticker import MaxNLocator
import os

MONGO_URI = os.getenv('MONGO_URI')

mongo_client = MongoClient(MONGO_URI)
db = mongo_client.HSE_BOT
users = db.Users
adaptation = db.Adaptation
daily_tasks = db.DailyTasks  # –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
planner = db.Planner  # –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞
user_planner = db.User_Planner  # –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á


def count_weekends(start_date, end_date):
    weekends = 0
    current_date = start_date
    while current_date <= end_date:
        if current_date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            weekends += 1
        current_date += timedelta(days=1)
    return weekends


async def get_adaptation_day(user_data):
    start_date = user_data.get("start_date")
    skipped_days = user_data.get("skipped_days", 0)

    if not start_date:
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."

    start_date = datetime.strptime(start_date, "%d.%m.%Y")
    current_date = datetime.now()

    # –ü–æ–¥—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    weekends = count_weekends(start_date, current_date)

    # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –¥–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö
    total_days_since_start = (current_date - start_date).days + 1
    adaptation_day = total_days_since_start - skipped_days - weekends

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
    if current_date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return None, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π."

    return adaptation_day, None


async def today_main_tasks(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    user_data = users.find_one({"_id": user_id})
    adaptation_day, error_message = await get_adaptation_day(user_data)

    if error_message:
        keyboard = []
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
        keyboard.append([back_button])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(text=error_message, reply_markup=reply_markup)
        return

    tasks_data = daily_tasks.find_one({"day": adaptation_day})
    tasks = tasks_data.get("tasks", []) if tasks_data else []

    keyboard = []

    if not tasks:
        response_text = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á."
    else:
        response_text = "–¢–≤–æ–∏ –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + \
            "\n".join(f"{i+1}. {task}" for i, task in enumerate(tasks))

    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
    keyboard.append([back_button])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)


async def skip_adaptation_day(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    user_data = users.find_one({"_id": user_id})
    start_date = user_data.get("start_date")

    if not start_date:
        response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
        keyboard = [[back_button]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)
        return

    start_date = datetime.strptime(start_date, "%d.%m.%Y")
    current_date = datetime.now()

    # –ü–æ–¥—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    weekends = count_weekends(start_date, current_date)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
    total_days_since_start = (current_date - start_date).days + 1
    skipped_days = user_data.get("skipped_days", 0)
    working_days_since_start = total_days_since_start - weekends

    if skipped_days >= working_days_since_start:
        response_text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
        keyboard = [[back_button]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)
        return

    users.update_one({"_id": user_id}, {
                     "$inc": {"skipped_days": 1}}, upsert=True)
    response_text = "–û–¥–∏–Ω –¥–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω."
    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
    keyboard = [[back_button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)


async def return_skipped_day(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    user_data = users.find_one({"_id": user_id})
    skipped_days = user_data.get("skipped_days", 0)

    if skipped_days <= 0:
        response_text = "–ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
        keyboard = [[back_button]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)
        return

    users.update_one({"_id": user_id}, {
                     "$inc": {"skipped_days": -1}}, upsert=True)
    response_text = "–û–¥–∏–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω."
    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
    keyboard = [[back_button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)


async def view_planner(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    user_data = users.find_one({"_id": user_id})
    adaptation_day, error_message = await get_adaptation_day(user_data)

    if error_message:
        response_text = error_message
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
        keyboard = [[back_button]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)
        return

    tasks_data = planner.find_one({"day": adaptation_day})
    tasks = tasks_data.get("tasks", []) if tasks_data else []

    user_tasks = user_planner.find_one({"user_id": user_id, "day": adaptation_day}) or {
        "completed_tasks": [], "postponed_tasks": []}

    keyboard = []
    response_text = "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    task_index = 0

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
    for task in tasks:
        task_index += 1
        contact_info = f" (–ö–æ–Ω—Ç–∞–∫—Ç: {
            task['contact']})" if task['contact'] else ""
        if task_index in user_tasks.get("completed_tasks", []):
            response_text += f"\n\nüü¢ {task_index}. {
                task['time']} - {task['task']}{contact_info}"
            keyboard.append([
                InlineKeyboardButton(f"–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é #{
                                     task_index}", callback_data=f'complete_task_{adaptation_day}_{task_index}')
            ])
        elif task_index not in user_tasks.get("postponed_tasks", []):
            response_text += f"\n\n‚ö™Ô∏è {task_index}. {
                task['time']} - {task['task']}{contact_info}"
            keyboard.append([
                InlineKeyboardButton(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É #{
                                     task_index}", callback_data=f'complete_task_{adaptation_day}_{task_index}'),
                InlineKeyboardButton(f"–û—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É #{
                                     task_index}", callback_data=f'postpone_task_{adaptation_day}_{task_index}')
            ])

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    postponed_tasks = [tasks[i-1]
                       for i in user_tasks.get("postponed_tasks", [])]
    if postponed_tasks:
        response_text += "\n\n–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for task in postponed_tasks:
            task_index = tasks.index(task) + 1
            contact_info = f" (–ö–æ–Ω—Ç–∞–∫—Ç: {
                task['contact']})" if task['contact'] else ""
            response_text += f"\n\n‚è≥ {task_index}. {
                task['time']} - {task['task']}{contact_info}"
            keyboard.append([
                InlineKeyboardButton(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É #{
                                     task_index}", callback_data=f'complete_task_{adaptation_day}_{task_index}')
            ])

    if not tasks and not postponed_tasks:
        response_text += "\n–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á."

    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='check_list')
    keyboard.append([back_button])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=response_text, reply_markup=reply_markup)


async def complete_task(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data.split('_')
    adaptation_day = int(data[2])
    task_index = int(data[-1])

    user_tasks = user_planner.find_one({"user_id": user_id, "day": adaptation_day}) or {
        "completed_tasks": [], "postponed_tasks": []}

    if task_index in user_tasks.get("completed_tasks", []):
        user_tasks["completed_tasks"].remove(task_index)
    else:
        user_tasks["completed_tasks"].append(task_index)
        if task_index in user_tasks.get("postponed_tasks", []):
            user_tasks["postponed_tasks"].remove(task_index)

    user_planner.update_one({"user_id": user_id, "day": adaptation_day}, {
                            "$set": user_tasks}, upsert=True)
    await view_planner(update, context)


async def postpone_task(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data.split('_')
    adaptation_day = int(data[2])
    task_index = int(data[-1])

    user_tasks = user_planner.find_one({"user_id": user_id, "day": adaptation_day}) or {
        "completed_tasks": [], "postponed_tasks": []}

    if task_index not in user_tasks.get("postponed_tasks", []):
        user_tasks["postponed_tasks"].append(task_index)

    user_planner.update_one({"user_id": user_id, "day": adaptation_day}, {
                            "$set": user_tasks}, upsert=True)
    await view_planner(update, context)


def get_all_users_progress():
    all_users = users.find()
    all_progress = {}
    user_counter = 1  # –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    for user in all_users:
        user_id = user["_id"]
        name = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫{user_counter}"
        user_counter += 1
        start_date = datetime.strptime(user.get("start_date"), "%d.%m.%Y")
        current_date = datetime.now()
        total_days = (current_date - start_date).days + 1

        progress = []

        for day in range(1, total_days + 1):
            day_tasks = user_planner.find_one({"user_id": user_id, "day": day}) or {
                "completed_tasks": []}
            completed_tasks_count = len(day_tasks.get("completed_tasks", []))
            progress.append((day, completed_tasks_count))

        all_progress[name] = progress

    return all_progress


def create_all_users_progress_chart(all_progress):
    plt.figure(figsize=(14, 8))

    for name, progress in all_progress.items():
        days, completed_tasks = zip(*progress) if progress else ([], [])
        plt.plot(days, completed_tasks, marker='o',
                 linestyle='-', label=f'{name}')

    plt.xlabel('–î–Ω–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    plt.legend(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", loc='upper right')
    plt.grid(True)

    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))

    plt.tight_layout()

    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    plt.savefig(temp_file.name)
    plt.close()

    return temp_file.name


async def send_progress_chart(update: Update, context: CallbackContext):
    await update.callback_query.answer()

    all_progress = get_all_users_progress()
    chart_path = create_all_users_progress_chart(all_progress)

    with open(chart_path, 'rb') as chart:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(chart))

    import os
    os.remove(chart_path)
